<div id="modal-group-tag-form" 
     class="modal-dialog" 
     role="dialog" 
     aria-labelledby="modalLabel" 
     aria-hidden="true"
>
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">
                &times;
            </button>
            <h3 class="modal-title">
                {{ 'tag_group'|trans({}, 'tag') }}
                [{{ group.getName() }}]
            </h3>
        </div>
        <div class="modal-body">
            <div>
                {% for groupTag in groupTags %}
                    <span class="label label-info margin-bottom-sm margin-right-sm">
                        {{ groupTag.getName() }}
                    </span>
                {% endfor %}
            </div>
            <br>
            <form id="group-tag-form"
                  action="{{ path('claro_tag_group_tag', {'group': group.getId()}) }}"
                  method="POST"
                  novalidate="novalidate"
            > 
                {% form_theme form 'ClarolineCoreBundle::form_theme_no_label.html.twig' %}
                {{ form_widget(form) }}
                
                <br>
                <span class="pull-right">
                    <span class="btn btn-default" data-dismiss="modal">
                        {{ 'cancel'|trans({},'platform') }}
                    </span>
                    <button type="submit" id='tag-btn' class="btn btn-primary">
                        {{ 'ok'|trans({},'platform') }}
                    </button>
                </span>
            </form>
            <br>
            <br>
        </div>
    </div>
</div>

{% block javascripts %}
    <script src='{{ asset('bundles/clarolinetag/js/bootstrap3-typeahead.js') }}'
            type="text/javascript"
    >
    </script>
    <script type="text/javascript">
        var allTags = [{% for tag in tags %}'{{ tag.getName() }}'{% if not loop.last %}, {% endif %}{% endfor %}];
        
        function extract(query) {
            var result = /([^,]+)$/.exec(query);
            
            if (result && result[1]) {
                
                return result[1].trim();
            } else {
                
                return '';
            }
        }

        $('#tag_form_tag').typeahead({
            source: allTags,
            updater: function (item) {
                
                return this.$element.val().replace(/[^,]*$/,'')+item+',';
            },
            matcher: function (item) {
                var q = extract(this.query);

                if (!q) {

                    return false;
                } else {

                    return ~item.toLowerCase().indexOf(q.toLowerCase())
                }
            },
            highlighter: function (item) {
                var q = extract(this.query).replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')

                return item.replace(new RegExp('(' + q + ')', 'ig'), function (match) {

                    return '<strong>' + match + '</strong>'
                });
            }
        });
    </script>
{% endblock %}